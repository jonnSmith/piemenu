const express = require('express');
const path = require('path');
const logger = require('morgan');
const fs = require('mz/fs');
const {exec} = require('child_process');

const app = express();
app.use(express.static(path.join(__dirname, 'public')));
app.set('views', __dirname + '/views');
app.set('view engine', 'jade');
app.use(logger('dev'));

/**
 * Render main page with style generated by passed params and provide jade all FA icons array and placehold images for background
 */
app.get('/', function (req, res) {
    let sectors = parseInt(req.query.s) ? parseInt(req.query.s) : 8;
    let radius = parseInt(req.query.r) ? parseInt(req.query.r) : 150;
    let points;
    if(sectors === 8) {
        points = '0,0 0,0';
    } else if(sectors < 8) {
        points = '0.5,0 0,0'
    } else {
        points = '0,0 0.5,0';
    }
    let images = [];
    for (let k = 200; k > 15; k = k - 5) {
        images.push('http://placehold.it/' + k * 10 + 'x' + k * 10);
    }
    fs.readFile(path.join(__dirname, 'node_modules/font-awesome/scss/_variables.scss'), 'utf8').then(contents => {
        let icons = contents.split(';').filter((i) => i.indexOf('-var-') > -1).map((i) =>
            i.replace(/\n/g, '').replace('$', '').replace('-var', '').split(':')[0]
        );
        exec('babel-node --presets es2015 ./node_modules/gulp/bin/gulp.js styles --sectors ' + sectors + ' --radius ' + radius, (error, stdout, stderr) => {
            if (error) {
                console.error('error', error);
                return;
            }
            console.log('gulp out', stdout);
            console.log('gulp err', stderr);
            res.render('index', {
                title: 'PieMenu',
                radius: radius,
                points: points,
                parts: sectors,
                icons: icons.sort(_ => .5 - Math.random()),
                images: images.sort(_ => .5 - Math.random())
            });
        });
    }).catch(err => {
        res.render(err);
    });
});

app.listen(3000);